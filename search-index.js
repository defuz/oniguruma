var searchIndex = {};
searchIndex['oniguruma'] = {"items":[[0,"","oniguruma","Rust bindings for the [Oniguruma](https://github.com/kkos/oniguruma)\nregular expressions library.",null,null],[3,"Options","","Regex parsing, compilation and evaluation options.",null,null],[3,"SyntaxOperator","","",null,null],[3,"SyntaxBehavior","","",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\n expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of\na regular expression.",null,null],[3,"Error","","An error that occurred during parsing, compiling or evaluating\na regular expression.",null,null],[3,"RegexConfig","","",null,null],[12,"options","","",0,null],[12,"syntax","","",0,null],[3,"Regex","","A compiled Oniguruma regular expression.",null,null],[3,"CaptureTreeNode","","",null,null],[3,"Region","","Representation of regex search result.",null,null],[3,"CaptureTreeNodeIter","","",null,null],[3,"Syntax","","",null,null],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"options"}],"output":{"name":"options"}}],[11,"eq","","",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"options"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",1,{"inputs":[{"name":"options"}],"output":{"name":"options"}}],[11,"all","","Returns the set containing all flags.",1,{"inputs":[{"name":"options"}],"output":{"name":"options"}}],[11,"bits","","Returns the raw value of the flags currently stored.",1,{"inputs":[{"name":"options"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",1,{"inputs":[{"name":"options"},{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",1,{"inputs":[{"name":"options"},{"name":"c_uint"}],"output":{"name":"options"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",1,{"inputs":[{"name":"options"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",1,{"inputs":[{"name":"options"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"options"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"options"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"options"}}],[11,"sub","","Returns the set difference of the two sets of flags.",1,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"options"}}],[11,"not","","Returns the complement of this set of flags.",1,{"inputs":[{"name":"options"}],"output":{"name":"options"}}],[11,"from_iter","","",1,{"inputs":[{"name":"options"},{"name":"t"}],"output":{"name":"options"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"syntaxoperator"}],"output":{"name":"syntaxoperator"}}],[11,"eq","","",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"syntaxoperator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",2,{"inputs":[{"name":"syntaxoperator"}],"output":{"name":"syntaxoperator"}}],[11,"all","","Returns the set containing all flags.",2,{"inputs":[{"name":"syntaxoperator"}],"output":{"name":"syntaxoperator"}}],[11,"bits","","Returns the raw value of the flags currently stored.",2,{"inputs":[{"name":"syntaxoperator"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",2,{"inputs":[{"name":"syntaxoperator"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",2,{"inputs":[{"name":"syntaxoperator"},{"name":"u64"}],"output":{"name":"syntaxoperator"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",2,{"inputs":[{"name":"syntaxoperator"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",2,{"inputs":[{"name":"syntaxoperator"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"syntaxoperator"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"syntaxoperator"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"syntaxoperator"}}],[11,"sub","","Returns the set difference of the two sets of flags.",2,{"inputs":[{"name":"syntaxoperator"},{"name":"syntaxoperator"}],"output":{"name":"syntaxoperator"}}],[11,"not","","Returns the complement of this set of flags.",2,{"inputs":[{"name":"syntaxoperator"}],"output":{"name":"syntaxoperator"}}],[11,"from_iter","","",2,{"inputs":[{"name":"syntaxoperator"},{"name":"t"}],"output":{"name":"syntaxoperator"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"syntaxbehavior"}],"output":{"name":"syntaxbehavior"}}],[11,"eq","","",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",3,{"inputs":[{"name":"syntaxbehavior"}],"output":{"name":"syntaxbehavior"}}],[11,"all","","Returns the set containing all flags.",3,{"inputs":[{"name":"syntaxbehavior"}],"output":{"name":"syntaxbehavior"}}],[11,"bits","","Returns the raw value of the flags currently stored.",3,{"inputs":[{"name":"syntaxbehavior"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"c_uint"}],"output":{"name":"syntaxbehavior"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",3,{"inputs":[{"name":"syntaxbehavior"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",3,{"inputs":[{"name":"syntaxbehavior"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"syntaxbehavior"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"syntaxbehavior"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"syntaxbehavior"}}],[11,"sub","","Returns the set difference of the two sets of flags.",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"syntaxbehavior"}],"output":{"name":"syntaxbehavior"}}],[11,"not","","Returns the complement of this set of flags.",3,{"inputs":[{"name":"syntaxbehavior"}],"output":{"name":"syntaxbehavior"}}],[11,"from_iter","","",3,{"inputs":[{"name":"syntaxbehavior"},{"name":"t"}],"output":{"name":"syntaxbehavior"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match\nin text. Capture group `0` always corresponds to the entire match.\nIf no match is found, then `None` is returned.",4,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"captures"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if i is not a valid capture group or if the capture group did\nnot match anything. The positions returned are always byte indices with\nrespect to the original string matched.",5,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`. If `i` isn't\na valid capture group or didn't match anything, then `None` is returned.",5,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Returns the number of captured groups.",5,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",5,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices in\nterms of the original string matched.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"next","","",6,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"code","","Return Oniguruma engine error code.",8,{"inputs":[{"name":"error"}],"output":{"name":"isize"}}],[11,"fmt","","",8,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"default","","",0,{"inputs":[{"name":"regexconfig"}],"output":{"name":"regexconfig"}}],[11,"fmt","","",4,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression with default options. Default syntax is\n`SYNTAX_RUBY`.",4,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"new_with_config","","",4,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"regexconfig"}],"output":{"name":"result"}}],[11,"search_with_region","","Search pattern in string and store search result into region object.",4,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"region"},{"name":"options"}],"output":{"name":"result"}}],[11,"match_with_region","","Match string and store search result into region object.",4,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"region"},{"name":"options"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",4,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",4,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"regex"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"capturetreenode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"region"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create empty region.",10,{"inputs":[{"name":"region"}],"output":{"name":"region"}}],[11,"len","","Returns the number of captured groups.",10,{"inputs":[{"name":"region"}],"output":{"name":"usize"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if i is not a valid capture group or if the capture group did\nnot match anything. The positions returned are always byte indices with\nrespect to the original string matched.",10,{"inputs":[{"name":"region"},{"name":"usize"}],"output":{"name":"option"}}],[11,"tree","","",10,{"inputs":[{"name":"region"}],"output":{"name":"option"}}],[11,"clear","","Clear contents of region.",10,{"inputs":[{"name":"region"}],"output":null}],[11,"group","","",9,{"inputs":[{"name":"capturetreenode"}],"output":{"name":"usize"}}],[11,"pos","","",9,null],[11,"len","","",9,{"inputs":[{"name":"capturetreenode"}],"output":{"name":"usize"}}],[11,"childs","","",9,{"inputs":[{"name":"capturetreenode"}],"output":{"name":"capturetreenodeiter"}}],[11,"index","","",9,{"inputs":[{"name":"capturetreenode"},{"name":"usize"}],"output":{"name":"capturetreenode"}}],[11,"fmt","","",11,{"inputs":[{"name":"capturetreenodeiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"capturetreenodeiter"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"syntax"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"syntax"}],"output":{"name":"syntax"}}],[11,"clone_from","","",12,{"inputs":[{"name":"syntax"},{"name":"syntax"}],"output":null}],[11,"get_operators","","",12,{"inputs":[{"name":"syntax"}],"output":{"name":"syntaxoperator"}}],[11,"set_operators","","",12,{"inputs":[{"name":"syntax"},{"name":"syntaxoperator"}],"output":null}],[11,"enable_operators","","",12,{"inputs":[{"name":"syntax"},{"name":"syntaxoperator"}],"output":null}],[11,"disable_operators","","",12,{"inputs":[{"name":"syntax"},{"name":"syntaxoperator"}],"output":null}],[11,"get_behaviors","","",12,{"inputs":[{"name":"syntax"}],"output":{"name":"syntaxbehavior"}}],[11,"set_behaviors","","",12,{"inputs":[{"name":"syntax"},{"name":"syntaxbehavior"}],"output":null}],[11,"enable_behaviors","","",12,{"inputs":[{"name":"syntax"},{"name":"syntaxbehavior"}],"output":null}],[11,"disable_behaviors","","",12,{"inputs":[{"name":"syntax"},{"name":"syntaxbehavior"}],"output":null}],[11,"get_options","","",12,{"inputs":[{"name":"syntax"}],"output":{"name":"options"}}],[11,"set_options","","",12,{"inputs":[{"name":"syntax"},{"name":"options"}],"output":null}],[6,"Encoding","","",null,null],[7,"ENCODING_UTF8","","",null,null],[7,"SYNTAX_ASIS","","Plain text syntax",null,null],[7,"SYNTAX_POSIX_BASIC","","POSIX Basic RE syntax",null,null],[7,"SYNTAX_POSIX_EXTENDED","","POSIX Extended RE syntax",null,null],[7,"SYNTAX_EMACS","","Emacs syntax",null,null],[7,"SYNTAX_GREP","","Grep syntax",null,null],[7,"SYNTAX_GNU_REGEX","","GNU regex syntax",null,null],[7,"SYNTAX_JAVA","","Java (Sun java.util.regex) syntax",null,null],[7,"SYNTAX_PERL","","Perl syntax",null,null],[7,"SYNTAX_PERL_NG","","Perl + named group syntax",null,null],[7,"SYNTAX_RUBY","","Ruby syntax (default)",null,null],[17,"OPTION_NONE","","Default options. This is both compile and search time option.",null,null],[17,"OPTION_IGNORECASE","","Ambiguity match on. This is compile time option.",null,null],[17,"OPTION_EXTEND","","Extended pattern form. This is compile time option.",null,null],[17,"OPTION_MULTILINE","","`'.'` match with newline. This is compile time option.",null,null],[17,"OPTION_SINGLELINE","","`'^'` -> `'\\A'`, `'$'` -> `'\\Z'`. This is compile time option.",null,null],[17,"OPTION_FIND_LONGEST","","Find longest match. This is compile time option.",null,null],[17,"OPTION_FIND_NOT_EMPTY","","Ignore empty match. This is compile time option.",null,null],[17,"OPTION_NEGATE_SINGLELINE","","Clear `OPTION_SINGLELINE` which is enabled on\n`SYNTAX_POSIX_BASIC`, `SYNTAX_POSIX_EXTENDED`,\n`SYNTAX_PERL`, `SYNTAX_PERL_NG`, `SYNTAX_JAVA`.\nThis is compile time option.",null,null],[17,"OPTION_DONT_CAPTURE_GROUP","","Only named group captured. This is search time option.",null,null],[17,"OPTION_CAPTURE_GROUP","","Named and no-named group captured. This is search time option.",null,null],[17,"OPTION_NOTBOL","","String head isn't considered as begin of line",null,null],[17,"OPTION_NOTEOL","","String end isn't considered as end of line",null,null],[17,"SYNTAX_OPERATOR_DOT_ANYCHAR","","`.`",null,null],[17,"SYNTAX_OPERATOR_ASTERISK_ZERO_INF","","`*`",null,null],[17,"SYNTAX_OPERATOR_PLUS_ONE_INF","","`+`",null,null],[17,"SYNTAX_OPERATOR_QMARK_ZERO_ONE","","`?`",null,null],[17,"SYNTAX_OPERATOR_BRACE_INTERVAL","","`{lower,upper}`",null,null],[17,"SYNTAX_OPERATOR_ESC_BRACE_INTERVAL","","`\\{lower,upper\\}`",null,null],[17,"SYNTAX_OPERATOR_VBAR_ALT","","`|`",null,null],[17,"SYNTAX_OPERATOR_ESC_VBAR_ALT","","`\\|`",null,null],[17,"SYNTAX_OPERATOR_LPAREN_SUBEXP","","`(...)`",null,null],[17,"SYNTAX_OPERATOR_ESC_LPAREN_SUBEXP","","`\\(...\\)`",null,null],[17,"SYNTAX_OPERATOR_ESC_AZ_BUF_ANCHOR","","`\\A, \\Z, \\z`",null,null],[17,"SYNTAX_OPERATOR_ESC_CAPITAL_G_BEGIN_ANCHOR","","`\\G`",null,null],[17,"SYNTAX_OPERATOR_DECIMAL_BACKREF","","`\\num`",null,null],[17,"SYNTAX_OPERATOR_BRACKET_CC","","`[...]`",null,null],[17,"SYNTAX_OPERATOR_ESC_W_WORD","","`\\w, \\W`",null,null],[17,"SYNTAX_OPERATOR_ESC_LTGT_WORD_BEGIN_END","","`\\<. \\>`",null,null],[17,"SYNTAX_OPERATOR_ESC_B_WORD_BOUND","","`\\b, \\B`",null,null],[17,"SYNTAX_OPERATOR_ESC_S_WHITE_SPACE","","`\\s, \\S`",null,null],[17,"SYNTAX_OPERATOR_ESC_D_DIGIT","","`\\d, \\D`",null,null],[17,"SYNTAX_OPERATOR_LINE_ANCHOR","","`^, $`",null,null],[17,"SYNTAX_OPERATOR_POSIX_BRACKET","","`[:xxxx:]`",null,null],[17,"SYNTAX_OPERATOR_QMARK_NON_GREEDY","","`??,*?,+?,{n,m}?`",null,null],[17,"SYNTAX_OPERATOR_ESC_CONTROL_CHARS","","`\\n,\\r,\\t,\\a ...`",null,null],[17,"SYNTAX_OPERATOR_ESC_C_CONTROL","","`\\cx`",null,null],[17,"SYNTAX_OPERATOR_ESC_OCTAL3","","`\\OOO`",null,null],[17,"SYNTAX_OPERATOR_ESC_X_HEX2","","`\\xHH`",null,null],[17,"SYNTAX_OPERATOR_ESC_X_BRACE_HEX8","","`\\x{7HHHHHHH}`",null,null],[17,"SYNTAX_OPERATOR_ESC_CAPITAL_Q_QUOTE","","`\\Q...\\E`",null,null],[17,"SYNTAX_OPERATOR_QMARK_GROUP_EFFECT","","`(?...)`",null,null],[17,"SYNTAX_OPERATOR_OPTION_PERL","","`(?imsx),(?-imsx)`",null,null],[17,"SYNTAX_OPERATOR_OPTION_RUBY","","`(?imx), (?-imx)`",null,null],[17,"SYNTAX_OPERATOR_PLUS_POSSESSIVE_REPEAT","","`?+,*+,++`",null,null],[17,"SYNTAX_OPERATOR_PLUS_POSSESSIVE_INTERVAL","","`{n,m}+`",null,null],[17,"SYNTAX_OPERATOR_CCLASS_SET_OP","","`[...&&..[..]..]`",null,null],[17,"SYNTAX_OPERATOR_QMARK_LT_NAMED_GROUP","","`(?<name>...)`",null,null],[17,"SYNTAX_OPERATOR_ESC_K_NAMED_BACKREF","","`\\k<name>`",null,null],[17,"SYNTAX_OPERATOR_ESC_G_SUBEXP_CALL","","`\\g<name>, \\g<n>`",null,null],[17,"SYNTAX_OPERATOR_ATMARK_CAPTURE_HISTORY","","`(?@..),(?@<x>..)`",null,null],[17,"SYNTAX_OPERATOR_ESC_CAPITAL_C_BAR_CONTROL","","`\\C-x`",null,null],[17,"SYNTAX_OPERATOR_ESC_CAPITAL_M_BAR_META","","`\\M-x`",null,null],[17,"SYNTAX_OPERATOR_ESC_V_VTAB","","`\\v as VTAB`",null,null],[17,"SYNTAX_OPERATOR_ESC_U_HEX4","","`\\uHHHH`",null,null],[17,"SYNTAX_OPERATOR_ESC_GNU_BUF_ANCHOR","","`\\`, \\'`",null,null],[17,"SYNTAX_OPERATOR_ESC_P_BRACE_CHAR_PROPERTY","","`\\p{...}, \\P{...}`",null,null],[17,"SYNTAX_OPERATOR_ESC_P_BRACE_CIRCUMFLEX_NOT","","`\\p{^..}, \\P{^..}`",null,null],[17,"SYNTAX_OPERATOR_ESC_H_XDIGIT","","`\\h, \\H`",null,null],[17,"SYNTAX_OPERATOR_INEFFECTIVE_ESCAPE","","`\\`",null,null],[17,"SYNTAX_BEHAVIOR_CONTEXT_INDEP_REPEAT_OPS","","`?, *, +, {n,m}`",null,null],[17,"SYNTAX_BEHAVIOR_CONTEXT_INVALID_REPEAT_OPS","","`error or ignore`",null,null],[17,"SYNTAX_BEHAVIOR_ALLOW_UNMATCHED_CLOSE_SUBEXP","","`...)...`",null,null],[17,"SYNTAX_BEHAVIOR_ALLOW_INVALID_INTERVAL","","`{???`",null,null],[17,"SYNTAX_BEHAVIOR_ALLOW_INTERVAL_LOW_ABBREV","","`{,n} => {0,n}`",null,null],[17,"SYNTAX_BEHAVIOR_STRICT_CHECK_BACKREF","","`/(\\1)/,/\\1()/ ..`",null,null],[17,"SYNTAX_BEHAVIOR_DIFFERENT_LEN_ALT_LOOK_BEHIND","","`(?<=a|bc)`",null,null],[17,"SYNTAX_BEHAVIOR_CAPTURE_ONLY_NAMED_GROUP","","See Oniguruma documenation",null,null],[17,"SYNTAX_BEHAVIOR_ALLOW_MULTIPLEX_DEFINITION_NAME","","`(?<x>)(?<x>)`",null,null],[17,"SYNTAX_BEHAVIOR_FIXED_INTERVAL_IS_GREEDY_ONLY","","`a{n}?=(?:a{n})?`",null,null],[17,"SYNTAX_BEHAVIOR_NOT_NEWLINE_IN_NEGATIVE_CC","","`[^...]`",null,null],[17,"SYNTAX_BEHAVIOR_BACKSLASH_ESCAPE_IN_CC","","`[..\\w..] etc..`",null,null],[17,"SYNTAX_BEHAVIOR_ALLOW_DOUBLE_RANGE_OP_IN_CC","","`[0-9-a]=[0-9\\-a]`",null,null],[17,"SYNTAX_BEHAVIOR_WARN_CC_OP_NOT_ESCAPED","","`[,-,]`",null,null],[17,"SYNTAX_BEHAVIOR_WARN_REDUNDANT_NESTED_REPEAT","","`(?:a*)+`",null,null]],"paths":[[3,"RegexConfig"],[3,"Options"],[3,"SyntaxOperator"],[3,"SyntaxBehavior"],[3,"Regex"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"Error"],[3,"CaptureTreeNode"],[3,"Region"],[3,"CaptureTreeNodeIter"],[3,"Syntax"]]};
initSearch(searchIndex);
