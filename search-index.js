var searchIndex = {};
searchIndex['oniguruma'] = {"items":[[0,"","oniguruma","Rust bindings for the [Oniguruma](https://github.com/kkos/oniguruma)\nregular expressions library.",null,null],[3,"Options","","Regex parsing, compilation and evaluation options.",null,null],[3,"Error","","An error that occurred during parsing, compiling or evaluating\na regular expression.",null,null],[3,"Region","","Representation of regex search result.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\n expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of\na regular expression.",null,null],[3,"Regex","","A compiled Oniguruma regular expression.",null,null],[7,"SYNTAX_ASIS","","Plain text syntax",null,null],[7,"SYNTAX_POSIX_BASIC","","POSIX Basic RE syntax",null,null],[7,"SYNTAX_POSIX_EXTENDED","","POSIX Extended RE syntax",null,null],[7,"SYNTAX_EMACS","","Emacs syntax",null,null],[7,"SYNTAX_GREP","","Grep syntax",null,null],[7,"SYNTAX_GNU_REGEX","","GNU regex syntax",null,null],[7,"SYNTAX_JAVA","","Java (Sun java.util.regex) syntax",null,null],[7,"SYNTAX_PERL","","Perl syntax",null,null],[7,"SYNTAX_PERL_NG","","Perl + named group syntax",null,null],[7,"SYNTAX_RUBY","","Ruby (default) syntax",null,null],[7,"ENCODING_UTF8","","",null,null],[17,"OPTION_NONE","","Default options. This is both compile and search time option.",null,null],[17,"OPTION_IGNORECASE","","Ambiguity match on. This is compile time option.",null,null],[17,"OPTION_EXTEND","","Extended pattern form. This is compile time option.",null,null],[17,"OPTION_MULTILINE","","`'.'` match with newline. This is compile time option.",null,null],[17,"OPTION_SINGLELINE","","`'^'` -> `'\\A'`, `'$'` -> `'\\Z'`. This is compile time option.",null,null],[17,"OPTION_FIND_LONGEST","","Find longest match. This is compile time option.",null,null],[17,"OPTION_FIND_NOT_EMPTY","","Ignore empty match. This is compile time option.",null,null],[17,"OPTION_NEGATE_SINGLELINE","","Clear `OPTION_SINGLELINE` which is enabled on\n`SYNTAX_POSIX_BASIC`, `SYNTAX_POSIX_EXTENDED`,\n`SYNTAX_PERL`, `SYNTAX_PERL_NG`, `SYNTAX_JAVA`.\nThis is compile time option.",null,null],[17,"OPTION_DONT_CAPTURE_GROUP","","Only named group captured. This is search time option.",null,null],[17,"OPTION_CAPTURE_GROUP","","Named and no-named group captured. This is search time option.",null,null],[17,"OPTION_NOTBOL","","String head isn't considered as begin of line",null,null],[17,"OPTION_NOTEOL","","String end isn't considered as end of line",null,null],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"options"}],"output":{"name":"options"}}],[11,"eq","","",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"options"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[{"name":"options"}],"output":{"name":"options"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[{"name":"options"}],"output":{"name":"options"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"options"}],"output":{"name":"onigoptions"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"options"},{"name":"onigoptions"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",0,{"inputs":[{"name":"options"},{"name":"onigoptions"}],"output":{"name":"options"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"options"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"options"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"options"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"options"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"options"}}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"options"},{"name":"options"}],"output":{"name":"options"}}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"options"}],"output":{"name":"options"}}],[11,"from_iter","","",0,{"inputs":[{"name":"options"},{"name":"t"}],"output":{"name":"options"}}],[11,"code","","Return Oniguruma engine error code.",1,{"inputs":[{"name":"error"}],"output":{"name":"isize"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"region"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create empty region.",2,{"inputs":[{"name":"region"}],"output":{"name":"region"}}],[11,"len","","Returns the number of captured groups.",2,{"inputs":[{"name":"region"}],"output":{"name":"usize"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if i is not a valid capture group or if the capture group did\nnot match anything. The positions returned are always byte indices with\nrespect to the original string matched.",2,{"inputs":[{"name":"region"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clear","","Clear contents of region.",2,{"inputs":[{"name":"region"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"region"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"captures"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if i is not a valid capture group or if the capture group did\nnot match anything. The positions returned are always byte indices with\nrespect to the original string matched.",3,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`. If `i` isn't\na valid capture group or didn't match anything, then `None` is returned.",3,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Returns the number of captured groups.",3,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",3,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in",3,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices in\nterms of the original string matched.",3,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"next","","",4,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression with default options. Default syntax is\n`SYNTAX_RUBY`.",6,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"new_with_options","","",6,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"options"}],"output":{"name":"result"}}],[11,"new_with_syntax","","",6,null],[11,"new_with_options_and_syntax","","",6,null],[11,"search_with_region","","Search pattern in string and store search result into region object.",6,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"region"},{"name":"options"}],"output":{"name":"result"}}],[11,"match_with_region","","Match string and store search result into region object.",6,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"region"},{"name":"options"}],"output":{"name":"result"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match\nin text. Capture group `0` always corresponds to the entire match.\nIf no match is found, then `None` is returned.",6,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"regex"}],"output":null}]],"paths":[[3,"Options"],[3,"Error"],[3,"Region"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"Regex"]]};
initSearch(searchIndex);
